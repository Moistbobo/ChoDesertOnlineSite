{"version":3,"sources":["components/Post/Post.js","assets/SiteContents.js","components/DamageCalculator/inputComponent.js","components/DamageCalculator/DamageCalculator.js","components/MainPage/mainpage.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","className","title","children","SiteContents","date","contents","InputComponent","style","display","flexDirection","justifyContent","flex","alignText","textAlignVertical","name","marginTop","marginBottom","width","type","onChange","DamageCalculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","strChangedHandler","e","value","parseFloat","target","setState","str","equipmentChangedHandler","equipment","critMultChangedHandler","critMult","balChangedHandler","bal","calculateMaxDamage","console","log","equip","state","Math","floor","calculateCritDamage","damage","concat","critDamage","textAlign","inputComponent","Component","MainPage","postContents","map","post","components_Post_Post","dangerouslySetInnerHTML","__html","background","components_DamageCalculator_DamageCalculator","App","MainPage_mainpage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4b690f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Post.css';\r\n\r\nconst Post = props => {\r\n    return (\r\n        <div\r\n        className={\"PostCard\"}>\r\n            <h1 className={\"PostCardBody\"}>{props.title}</h1>\r\n            <div\r\n            className={\"PostCardBody\"}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n","const SiteContents = [\r\n    {\r\n      title :\"July 20 2019 Hotfixes\",\r\n      date: \"July 20 2019\",\r\n      contents :`\r\n<h2>Hotfixes</h2>\r\n<p>A quick hotfix and update has been applied to the game.</p>\r\n<p>Strength now has a hardcap of 18. This is to prevent people from getting too strong too quickly while the levelling system is being revamped.</p>\r\n<p>Various string fixes and QOL fixes such as RPG commands working in non-rpg channels has also been applied.</p>\r\n<h2>Future plans</h2>\r\n<p>There are plans to revamp the levelling system so that it uses a EXP - Level with assignable skill points. There will also be expansions to the dungeon system, such as a floor system and additional monsters. Consumables are also in the works.</p>\r\nThe team at Cho Abyss would like to thank you all for your on going support. We swear to never make the game P2W!`\r\n    },\r\n    {\r\n        title: \"PVE and Equipment system update\",\r\n        date: \"July 20 2019\",\r\n        contents: `<p>This is a large update that brings an inventory and equipment system, a pve system, \r\n        Dungeon PVE system, and various QOL changes</p></br>\r\n<h2>Dungeon Mode</h2>\r\n<p>This update brings an all new Dungeon Mode to Cho Desert Online!</br>\r\n In dungeon mode, players can grind monsters for loot and to increase their strength. To fight monsters, simply react to the message when a monster spawns!</p>\r\n </br>\r\n<img src=\"https://i.imgur.com/JMRIGUj.png\"/>\r\n</br>\r\n\r\n </br>\r\n<img src=\"https://i.imgur.com/BgBQnvG.png\"/>\r\n</br>\r\n\r\n<h2>Inventory and Equipment System</h2>\r\n<p>To accommodate the new dungeon system, an inventory and equipment system has been added. Items can be obtained either randomly\r\nin channels that have item drops enabled or from defeating monsters in dungeon mode. The inventory and equipped weapon can be checked using the <mark>.inventory</mark> command.\r\n</br>\r\n<img src=\"https://i.imgur.com/iWuNrDu.png\"/>\r\n</br>\r\nAdditionally, weapons can be equipped by using the <mark>.equip [weaponIndex]</mark> and <mark>.unequipweapon</mark> commands.</br></br>\r\nWhile weapons can be obtained as drops, stronger weapons will require crafting. To check the available craftin recipes and the required mats, use the <mark>.craftrecipes</mark> or <mark>.cr</mark> command. To craft an item, use the <mark>.craft [recipeIndex]</mark> command;\r\n</br><img src=\"https://i.imgur.com/zP8QLap.png\"/></br>\r\n</p>\r\n<h2>QOL Changes</h2>\r\n<p>Apart from some incorrect string fixes, the ability to heal other players has been added. However, to prevent abuse, heals on other players\r\nare less effective than regular heals.</p>\r\n</br>\r\n<img src=\"https://i.imgur.com/Ax7ygFu.png\"/>\r\n</br>\r\n</br>\r\n</br>\r\nThe team at Cho Abyss would like to thank you all for your on going support. We swear to never make the game P2W!\r\n\r\n\r\n`\r\n    }\r\n];\r\n\r\nexport default SiteContents;\r\n","import React from \"react\";\r\n\r\nconst InputComponent = props =>{\r\n    return(\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection:'row',\r\n            justifyContent:'center'\r\n        }}>\r\n            <p\r\n            style={{\r\n                display:'flex',\r\n                flex:0.2,\r\n                alignText:'center',\r\n                textAlignVertical:'center'\r\n            }}>{props.name}</p>\r\n\r\n            <input\r\n                style={{\r\n                    display:'flex',\r\n                    marginTop:'auto',\r\n                    marginBottom:'auto',\r\n                    width:'50px'\r\n                }}\r\n                type={'number'}\r\n                   onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputComponent;\r\n","import React, {Component} from 'react';\r\nimport './DamageCalculator.css';\r\nimport InputComponent from \"./inputComponent\";\r\n\r\nclass DamageCalculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            str: null,\r\n            equipment: null,\r\n            bal: null,\r\n            critMult: null\r\n        }\r\n    }\r\n\r\n    strChangedHandler = (e) => {\r\n        const value = parseFloat(e.target.value);\r\n\r\n        this.setState({\r\n            str: value\r\n        });\r\n    };\r\n\r\n    equipmentChangedHandler = (e) => {\r\n        const value = parseFloat(e.target.value);\r\n\r\n        this.setState({\r\n            equipment: value\r\n        });\r\n    };\r\n\r\n    critMultChangedHandler = (e) => {\r\n        const value = parseFloat(e.target.value);\r\n\r\n        this.setState({\r\n            critMult: value\r\n        });\r\n    };\r\n\r\n    balChangedHandler = (e) => {\r\n        const value = parseFloat(e.target.value);\r\n\r\n        this.setState({\r\n            bal: value\r\n        });\r\n    };\r\n\r\n    calculateMaxDamage = () => {\r\n        console.log('calculating damage');\r\n        const equip = this.state.equipment + 10;\r\n        const str = this.state.str;\r\n\r\n        const baseConstant = 5;\r\n        const baseLog = 1.5;\r\n\r\n        return Math.floor(baseConstant * (Math.log(equip * str) / Math.log(baseLog)));\r\n    };\r\n\r\n    calculateCritDamage = () => {\r\n        return Math.floor(this.calculateMaxDamage() * this.state.critMult);\r\n    };\r\n\r\n    render() {\r\n        const damage = (this.state.str && this.state.equipment) ? `Max Damage: ${this.calculateMaxDamage()}` : '';\r\n        const critDamage = (this.state.str && this.state.equipment && this.state.critMult) ? `Max Crit Damage: ${this.calculateCritDamage()}` : '';\r\n        return (\r\n            <div\r\n                className={'DamageCalculator'}>\r\n                <h1\r\n                    style={{textAlign: 'center'}}>Damage calculator</h1>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column'\r\n                }}>\r\n\r\n                    <InputComponent name={'STR:'}\r\n                                    onChange={this.strChangedHandler}/>\r\n\r\n                    <InputComponent name={'EQUIP:'}\r\n                                    onChange={this.equipmentChangedHandler}/>\r\n\r\n                    <InputComponent name={'CRIT MULT:'}\r\n                                    onChange={this.critMultChangedHandler}/>\r\n\r\n                    {/*<InputComponent name={'BAL:'}*/}\r\n                    {/*                onChange={this.balChangedHandler}/>*/}\r\n                </div>\r\n\r\n\r\n                <p style={{textAlign: 'center'}}>{damage}</p>\r\n                <p style={{textAlign: 'center'}}>{critDamage}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DamageCalculator;\r\n","import React from 'react';\r\nimport './mainpage.css';\r\nimport Post from \"../Post/Post\";\r\nimport SiteContents from '../../assets/SiteContents';\r\nimport DamageCalculator from \"../DamageCalculator/DamageCalculator\";\r\n\r\nconst MainPage = props => {\r\n\r\n    const postContents = SiteContents.map((post) => {\r\n        return (\r\n            <Post title={post.title}>\r\n                <div dangerouslySetInnerHTML={{__html: post.contents}}/>\r\n            </Post>\r\n        )\r\n    });\r\n    return (\r\n        <div className='container'>\r\n            <div className='MainPage'>\r\n                <h1 style={{textAlign:'center', background:'rgba(255,255,255,0.4)'}}>CHO DESERT ONLINE</h1>\r\n                {postContents}\r\n            </div>\r\n            <div className='SideBar'>\r\n                <DamageCalculator/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default MainPage;\r\n","import React from 'react';\nimport './App.css';\nimport MainPage from \"./components/MainPage/mainpage\";\n\nfunction App() {\n    return (\n       <MainPage/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}